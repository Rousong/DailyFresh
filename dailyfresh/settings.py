"""
Django settings for dailyfresh project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# 加入系统的路径,可以不在使用ａｐｐｓ前缀
sys.path.insert(0,os.path.join(BASE_DIR,'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '_6*tf_-rjd-6*2%rw&k3f+lyw35h#z+hm6q3*$nxaid*q*3w=g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack',  # 注册全文检索框架
    'tinymce', # 富文本编辑器
    'apps.user', # 用户模块
    'apps.cart', # 购物车模块
    'apps.goods',# 商品模块
    'apps.order',# 订单模块



)

# 注意!!!! 这是Django版本的问题，1.10之前，中间件的key为MIDDLEWARE_CLASSES, 1.10之后，为MIDDLEWARE。
# 所以在开发环境和其他环境的版本不一致时，要特别小心，会有坑。
MIDDLEWARE =  (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    #'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'dailyfresh.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dailyfresh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mysitedb',
        'USER': 'root',
        'PASSWORD':'11111111',
        'HOST':'db',
        'PORT':'3306',

    }
}
#要手动去创建这个数据库:
# create database tiantian charset=utf8;


# 指定django 的默认使用的认证模型类 要不然迁移的时候会报错
AUTH_USER_MODEL = 'user.User'

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

CELERY_ENABLE_UTC = True
CELERY_TIMEZONE = "UTC"



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS=[
    os.path.join(BASE_DIR,'static')
    # 这个的意思是字符串拼接 BASEDIR是项目目录 后面可以添加拼接目录
]


# 富文本编辑器的设置
TINYMCE_DEFAULT_CONFIG ={
    'theme':'advanced',
    'width':600,
    'height':400,
}

# 邮件相关的设置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_SSL = True
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 465
#发送邮件的邮箱
EMAIL_HOST_USER = 'do_1024@163.com'
#在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'beaock0039yuzk'
#收件人看到的发件人
EMAIL_FROM = 'do_1024<do_1024@163.com>'

# EMAIL_FROM = 'do_1024  这里的名字一定要设置正确的名字 要和邮箱里的设置对应上
# 要不然就会发送失败


# CELERY_BROKER_URL = 'redis://redis:6379/0'
# CELERY_BROKER_TRANSPORT = 'redis'
# CELERY_RESULT_BACKEND = "redis"
# CELERY_BACKEND_URL = 'redis://redis:6379/1'
#
# BROKER_TRANSPORT = "redis"
# _REDIS_LOCATION = 'redis://{}:{}'.format(os.environ.get("REDIS_PORT_6379_TCP_ADDR"), os.environ.get("REDIS_PORT_6379_TCP_PORT"))
# BROKER_URL = _REDIS_LOCATION + "/0"
# CELERY_RESULT_BACKEND = _REDIS_LOCATION + "/1"
#
# REDIS_PORT = 6379
# REDIS_DB = 0
# REDIS_HOST = os.environ.get('REDIS_PORT_6379_TCP_ADDR', 'redis')
#


# Django支持的缓存有:Memcached(是Redis一样是内存型数据库)
# # 配置ｃａｃｈｅ缓存到ｒｅｄｉｓ的2号数据库
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://redis:6379/2", # redis所在的主机的IP地址
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}



# 配置session的存储到缓存中，即　使用的redis数据库
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default" # 之后的章节会讲

# 如下设置是默认的 不写的话这就是默认的设置 存储在数据库中
# SESSION_ENGINE = "django.contrib.sessions.backends.db"

# 配置登录url的地址 默认的是 'accounts/login'
LOGIN_URL = '/user/login'

# 使用分布式文件系统和nginx协同配置
# 指定Django上传文件的存储类
DEFAULT_FILE_STORAGE = 'utils.fdfs.storage.FDFSStorage'
# 指定fdfs的客户端的配置文件的路径
FDFS_CLIENT_CONF = './utils/fdfs/client.conf'

# 指定fdfs 服务器 nginx服务的地址
FDFS_NGINX_URL = 'http://10.0.75.2:8080/' # nginx所在的主机IP地址

# 全文检索框架的配置
HAYSTACK_CONNECTIONS = {
    'default': {
        # 使用whoosh引擎
        # 'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        # 索引文件路径
        'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
    }
}

# 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

# 指定搜索结果每页显示的条数
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 12